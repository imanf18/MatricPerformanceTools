# -*- coding: utf-8 -*-
"""MetricPerformanceTools.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dURHh6ZW7IAPDRU5spU2QkvyJ49e6NKE
"""

import numpy as np
import matplotlib.pyplot as plt
y_act = np.array([10,20,30,40,50,60,70,80,90]) ## DATA AKTUAL
y_pre = np.array([15,25,35,45,55,65,75,85,95]) ## DATA PREDIKSI

## MAE TEST
## Cara 1 (Pake Numpy):
print('MAE (cara 1):',np.mean(np.abs(y_act - y_pre)))
## Cara 2 (Pake Sklearn):
from sklearn.metrics import mean_absolute_error
print('MAE (cara 2):', mean_absolute_error(y_act,y_pre))

## RAE TEST
RAE = (np.sum(abs(y_act - y_pre)))/(np.sum(abs(y_act - np.mean(y_act))))
print('RAE : ', RAE)

## MSE TEST
MSE = np.mean(np.square(y_act - y_pre))
print('MSE :',MSE)

## RSE TEST
RSE = np.sum(np.square(y_act - y_pre)) / np.sum(np.square(y_act - np.mean(y_act)))
print('RSE :',RSE)

## RMSE TEST
RMSE = np.sqrt(np.mean(np.square(y_act - y_pre)))
print('RMSE : ', RMSE)

## MAPE TEST
MAPE = np.mean(np.abs(y_act - y_pre)) * 100
print('MAPE : ', round(MAPE,2), '%', sep='')

## MPE TEST
MPE = np.mean(y_act - y_pre) * 100
print('MPE : ', round(MPE,2), '%', sep='')

## R Squared TEST
## Cara 1:
RSE = np.sum(np.square(y_act - y_pre)) / np.sum(np.square(y_act - np.mean(y_act)))
r2 = 1-RSE
print('R2 (cara 1):',r2)
## Cara 2:
from sklearn.metrics import r2_score
print('R2 (cara 2):',r2_score(y_act, y_pre))

# Plot
plt.figure(figsize=(10, 6))
plt.plot(y_act, label='Actual')
plt.plot(y_pre, label='Predicted')
plt.legend()
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Actual vs Predicted')
plt.show()